package generation

import (
	"fmt"
	"regexp"
	"slices"
	"strings"

	"github.com/cccteam/ccc/accesstypes"
	"github.com/cccteam/ccc/resource"
	"github.com/cccteam/ccc/resource/generation/parser"

	"github.com/ettle/strcase"
)

type Generator interface {
	Generate() error
	Close()
}

type field interface {
	// Returns true if field type is iterable (slice or array), false otherwise.
	IsIterable() bool

	// Qualified type without array/slice/pointer prefix.
	// e.g. *ccc.UUID -> ccc.UUID, []ccc.UUID -> ccc.UUID
	TypeName() string
}

var tokenizeRegex = regexp.MustCompile(`(TOKENIZE_[^)]+)\(([^)]+)\)`)

const (
	genPrefix = "zz_gen"
)

type ConstraintType string

const (
	PrimaryKey ConstraintType = "PRIMARY KEY"
	ForeignKey ConstraintType = "FOREIGN KEY"
)

type HandlerType string

const (
	List  HandlerType = "list"
	Read  HandlerType = "read"
	Patch HandlerType = "patch"
)

func (h HandlerType) template() string {
	switch h {
	case Read:
		return readTemplate
	case List:
		return listTemplate
	case Patch:
		return patchTemplate
	default:
		panic(fmt.Sprintf("template(): unknown handler type: %s", h))
	}
}

func (h HandlerType) Method() string {
	switch h {
	case Read, List:
		return "GET"
	case Patch:
		return "PATCH"
	default:
		panic(fmt.Sprintf("Method(): unknown handler type: %s", h))
	}
}

type OptionType string

const (
	Regenerate OptionType = "regenerate"
	NoGenerate OptionType = "nogenerate"
)

type PatchType string

const (
	CreatePatch PatchType = "Create"
	UpdatePatch PatchType = "Update"
)

type GeneratedFileDeleteMethod int

const (
	// Used to remove files with the genPrefix value instead of reading the contents of the file.
	Prefix GeneratedFileDeleteMethod = iota
	// Used to remove files that contain the header comment "// Code generated by resourcegeneration. DO NOT EDIT."
	HeaderComment
)

const (
	querySetOutputFileName        = "types.go"
	resourceInterfaceOutputName   = "resources_iface"
	resourcesTestFileName         = "resource_types_test.go"
	routesOutputName              = "routes"
	routerTestOutputName          = "routes_test"
	consolidatedHandlerOutputName = "consolidated_handler"
)

var rpcInterfaces = [...]string{"TxnRunner", "DBRunner"}

type searchIndex struct {
	Name       string
	SearchType string
}

type InformationSchemaResult struct {
	TableName            string  `spanner:"TABLE_NAME"`
	ColumnName           string  `spanner:"COLUMN_NAME"`
	ConstraintName       *string `spanner:"CONSTRAINT_NAME"`
	IsPrimaryKey         bool    `spanner:"IS_PRIMARY_KEY"`
	IsForeignKey         bool    `spanner:"IS_FOREIGN_KEY"`
	ReferencedTable      *string `spanner:"REFERENCED_TABLE"`
	ReferencedColumn     *string `spanner:"REFERENCED_COLUMN"`
	SpannerType          string  `spanner:"SPANNER_TYPE"`
	IsNullable           bool    `spanner:"IS_NULLABLE"`
	IsView               bool    `spanner:"IS_VIEW"`
	IsIndex              bool    `spanner:"IS_INDEX"`
	IsUniqueIndex        bool    `spanner:"IS_UNIQUE_INDEX"`
	GenerationExpression *string `spanner:"GENERATION_EXPRESSION"`
	OrdinalPosition      int64   `spanner:"ORDINAL_POSITION"`
	KeyOrdinalPosition   int64   `spanner:"KEY_ORDINAL_POSITION"`
	HasDefault           bool    `spanner:"HAS_DEFAULT"`
}

type tableMetadata struct {
	Columns       map[string]columnMeta
	SearchIndexes map[string][]*expressionField
	IsView        bool
	PkCount       int
}

type columnMeta struct {
	ColumnName         string
	ConstraintTypes    []ConstraintType
	IsPrimaryKey       bool
	IsForeignKey       bool
	SpannerType        string
	IsNullable         bool
	IsIndex            bool
	IsUniqueIndex      bool
	OrdinalPosition    int64
	KeyOrdinalPosition int64
	ReferencedTable    string
	ReferencedColumn   string
	HasDefault         bool
}

type generationOption struct {
	option  OptionType
	handler HandlerType
}

type generatedHandler struct {
	template    string
	handlerType HandlerType
}

type generatedRoute struct {
	Method      string
	Path        string
	HandlerFunc string
}

type routeMap map[string][]generatedRoute

func (r routeMap) Resources() []string {
	resources := []string{}
resourceRange:
	for resource := range r {
		for _, route := range r[resource] {
			if route.Method == "POST" {
				continue resourceRange
			}
		}
		resources = append(resources, resource)
	}

	slices.Sort(resources)

	return resources
}

type rpcMethodInfo struct {
	parser.Struct
	Fields []*rpcField
}

type rpcField struct {
	parser.Field
	typescriptType string
}

func (r rpcField) JSONTag() string {
	caser := strcase.NewCaser(false, nil, nil)
	camelCaseName := caser.ToCamel(r.Name())

	return fmt.Sprintf("json:%q", camelCaseName)
}

func (f *rpcField) TypescriptDataType() string {
	if f.typescriptType == "uuid" {
		return "string"
	}

	return f.typescriptType
}

type resourceInfo struct {
	parser.TypeInfo
	Fields                []*resourceField
	searchIndexes         map[string][]*expressionField // Search Indexes are hidden columns in Spanner that are not present in Go struct definitions
	IsView                bool                          // Determines how CreatePatch is rendered in resource generation.
	HasCompoundPrimaryKey bool                          // Determines how CreatePatchSet is rendered in resource generation.
	IsConsolidated        bool
}

func (r *resourceInfo) SearchIndexes() []*searchIndex {
	typeIndexMap := make(map[resource.FilterType]string)
	for searchIndex, expressionFields := range r.searchIndexes {
		for _, exprField := range expressionFields {
			typeIndexMap[exprField.tokenType] = searchIndex
		}
	}

	var indexes []*searchIndex
	for tokenType, indexName := range typeIndexMap {
		indexes = append(indexes, &searchIndex{
			Name:       indexName,
			SearchType: string(tokenType),
		})
	}

	return indexes
}

func (r *resourceInfo) PrimaryKeyIsGeneratedUUID() bool {
	if r.HasCompoundPrimaryKey {
		return false
	}
	for _, f := range r.Fields {
		if f.IsPrimaryKey {
			if f.IsForeignKey {
				return false
			}
			return f.Type() == "ccc.UUID"
		}
	}

	return false
}

func (r *resourceInfo) PrimaryKeyType() string {
	for _, f := range r.Fields {
		if f.IsPrimaryKey {
			return f.Type()
		}
	}

	return ""
}

func (r *resourceInfo) PrimaryKey() *resourceField {
	if r.HasCompoundPrimaryKey {
		return nil
	}

	for _, f := range r.Fields {
		if f.IsPrimaryKey {
			return f
		}
	}

	return nil
}

func (r *resourceInfo) HasIndexes() bool {
	for _, field := range r.Fields {
		if field.IsIndex || field.IsUniqueIndex {
			return true
		}
	}

	return false
}

type resourceField struct {
	*parser.Field
	Parent         *resourceInfo
	typescriptType string
	// Spanner stuff
	IsPrimaryKey       bool
	IsForeignKey       bool
	IsIndex            bool
	IsUniqueIndex      bool
	IsNullable         bool
	OrdinalPosition    int64 // Position of column in the table definition
	KeyOrdinalPosition int64 // Position of primary or foreign key in a compound key definition
	IsEnumerated       bool
	ReferencedResource string
	ReferencedField    string
	HasDefault         bool
}

func (f *resourceField) TypescriptDataType() string {
	if f.typescriptType == "uuid" {
		return "string"
	}

	return f.typescriptType
}

func (f *resourceField) TypescriptDisplayType() string {
	if f.IsEnumerated {
		return "enumerated"
	}

	return f.typescriptType
}

func (f *resourceField) JSONTag() string {
	if f.IsInputOnly() {
		return fmt.Sprintf("json:%q", "-")
	}

	caser := strcase.NewCaser(false, nil, nil)
	camelCaseName := caser.ToCamel(f.Name())

	if f.IsPrimaryKey {
		return fmt.Sprintf("json:%q", camelCaseName)
	}

	return fmt.Sprintf("json:%q", camelCaseName+",omitzero")
}

func (f *resourceField) JSONTagForPatch() string {
	if f.IsPrimaryKey || f.IsOutputOnly() {
		return fmt.Sprintf("json:%q", "-")
	}

	caser := strcase.NewCaser(false, nil, nil)
	camelCaseName := caser.ToCamel(f.Name())

	return fmt.Sprintf("json:%q", camelCaseName)
}

func (f *resourceField) IndexTag() string {
	if f.IsIndex {
		return `index:"true"`
	}

	if f.Parent.IsView {
		t, ok := f.LookupTag("index")
		if ok && t == "true" {
			return `index:"true"`
		}
	}

	return ""
}

func (f *resourceField) UniqueIndexTag() string {
	if f.IsUniqueIndex {
		return `index:"true"`
	}

	return ""
}

func (f *resourceField) IsImmutable() bool {
	tag, ok := f.LookupTag("conditions")
	if !ok {
		return false
	}

	conditions := strings.Split(tag, ",")

	return slices.Contains(conditions, "immutable")
}

func (f *resourceField) IsOutputOnly() bool {
	tag, ok := f.LookupTag("conditions")
	if !ok {
		return false
	}

	conditions := strings.Split(tag, ",")

	return slices.Contains(conditions, "output_only")
}

func (f *resourceField) IsInputOnly() bool {
	tag, ok := f.LookupTag("conditions")
	if !ok {
		return false
	}

	conditions := strings.Split(tag, ",")

	return slices.Contains(conditions, "input_only")
}

func (f *resourceField) QueryTag() string {
	query, ok := f.LookupTag("query")
	if !ok {
		return ""
	}

	return fmt.Sprintf("query:%q", query)
}

func (f *resourceField) ReadPermTag() string {
	tag, ok := f.LookupTag("perm")
	if !ok {
		return ""
	}

	permissions := strings.Split(tag, ",")

	if slices.Contains(permissions, "Read") {
		return fmt.Sprintf("perm:%q", "Read")
	}

	return ""
}

func (f *resourceField) ListPermTag() string {
	tag, ok := f.LookupTag("perm")
	if !ok {
		return ""
	}

	permissions := strings.Split(tag, ",")

	if slices.Contains(permissions, string(accesstypes.List)) {
		return fmt.Sprintf("perm:%q", accesstypes.List)
	}

	return ""
}

func (f *resourceField) PatchPermTag() string {
	tag, ok := f.LookupTag("perm")
	if !ok {
		return ""
	}

	permissions := strings.Split(tag, ",")

	var patches []string
	for _, perm := range permissions {
		if perm != string(accesstypes.Read) && perm != string(accesstypes.List) {
			patches = append(patches, perm)
		}
	}

	if len(patches) != 0 {
		return fmt.Sprintf("perm:%q", strings.Join(patches, ","))
	}

	return ""
}

func (f *resourceField) ImmutableTag() string {
	if f.IsImmutable() {
		return `immutable:"true"`
	}

	return ""
}

func (f *resourceField) SearchIndexTags() string {
	typeIndexMap := make(map[resource.FilterType][]string)
	for searchIndex, expressionFields := range f.Parent.searchIndexes {
		for _, exprField := range expressionFields {
			if spannerTag, ok := f.LookupTag("spanner"); ok && spannerTag == exprField.fieldName {
				typeIndexMap[exprField.tokenType] = append(typeIndexMap[exprField.tokenType], searchIndex)
			}
		}
	}

	var tags []string
	for tokenType, indexes := range typeIndexMap {
		tags = append(tags, fmt.Sprintf("%s:%q", tokenType, strings.Join(indexes, ",")))
	}

	return strings.Join(tags, " ")
}

func (f *resourceField) IsView() bool {
	return f.Parent.IsView
}

func (f *resourceField) IsRequired() bool {
	if f.IsPrimaryKey && f.Type() != "ccc.UUID" {
		return true
	}

	if !f.IsPrimaryKey && !f.IsNullable && !f.HasDefault {
		return true
	}

	return false
}

type expressionField struct {
	tokenType resource.FilterType
	fieldName string
}

func generatedFileName(name string) string {
	return fmt.Sprintf("%s_%s.go", genPrefix, name)
}

type TSGenMode interface {
	mode()
}

type tsGenMode int

func (t tsGenMode) mode() {}

const (
	// Adds permission.ts to generator output
	TSPerm tsGenMode = 1 << iota

	// Adds resource.ts to generator output
	TSMeta
)
