package generation

import (
	"fmt"
	"go/types"
	"reflect"
	"regexp"
	"slices"
	"strings"
	"time"

	"github.com/cccteam/ccc"
	"github.com/cccteam/ccc/resource"
	"github.com/shopspring/decimal"

	"github.com/ettle/strcase"
)

var tokenizeRegex = regexp.MustCompile(`(TOKENIZE_[^)]+)\(([^)]+)\)`)

const (
	genPrefix = "zz_gen"
)

type ConstraintType string

const (
	PrimaryKey ConstraintType = "PRIMARY KEY"
	ForeignKey ConstraintType = "FOREIGN KEY"
)

type HandlerType string

const (
	List  HandlerType = "list"
	Read  HandlerType = "read"
	Patch HandlerType = "patch"
)

func (h HandlerType) Method() string {
	switch h {
	case Read, List:
		return "GET"
	case Patch:
		return "PATCH"
	default:
		panic(fmt.Sprintf("Method(): unknown handler type: %s", h))
	}
}

type OptionType string

const (
	Regenerate OptionType = "regenerate"
	NoGenerate OptionType = "nogenerate"
)

type PatchType string

const (
	CreatePatch PatchType = "Create"
	UpdatePatch PatchType = "Update"
)

type GeneratedFileDeleteMethod int

const (
	// Used to remove files with the genPrefix value instead of reading the contents of the file.
	Prefix GeneratedFileDeleteMethod = iota
	// Used to remove files that contain the header comment "// Code generated by resourcegeneration. DO NOT EDIT."
	HeaderComment
)

const (
	querySetOutputFileName        = "types.go"
	resourceInterfaceOutputName   = "resources_iface"
	resourcesTestFileName         = "resource_types_test.go"
	routesOutputName              = "routes"
	routerTestOutputName          = "routes_test"
	consolidatedHandlerOutputName = "consolidated_handler"
)

type searchIndex struct {
	Name       string
	SearchType string
}

type InformationSchemaResult struct {
	TableName            string  `spanner:"TABLE_NAME"`
	ColumnName           string  `spanner:"COLUMN_NAME"`
	ConstraintName       *string `spanner:"CONSTRAINT_NAME"`
	IsPrimaryKey         bool    `spanner:"IS_PRIMARY_KEY"`
	IsForeignKey         bool    `spanner:"IS_FOREIGN_KEY"`
	ReferencedTable      *string `spanner:"REFERENCED_TABLE"`
	ReferencedColumn     *string `spanner:"REFERENCED_COLUMN"`
	SpannerType          string  `spanner:"SPANNER_TYPE"`
	IsNullable           bool    `spanner:"IS_NULLABLE"`
	IsView               bool    `spanner:"IS_VIEW"`
	IsIndex              bool    `spanner:"IS_INDEX"`
	IsUniqueIndex        bool    `spanner:"IS_UNIQUE_INDEX"`
	GenerationExpression *string `spanner:"GENERATION_EXPRESSION"`
	OrdinalPosition      int64   `spanner:"ORDINAL_POSITION"`
	KeyOrdinalPosition   int64   `spanner:"KEY_ORDINAL_POSITION"`
}

type TableMetadata struct {
	Columns       map[string]ColumnMeta
	SearchIndexes map[string][]*expressionField
	IsView        bool
	PkCount       int
}

type ColumnMeta struct {
	ColumnName         string
	ConstraintTypes    []ConstraintType
	IsPrimaryKey       bool
	IsForeignKey       bool
	SpannerType        string
	IsNullable         bool
	IsIndex            bool
	IsUniqueIndex      bool
	OrdinalPosition    int64
	KeyOrdinalPosition int64
	ReferencedTable    string
	ReferencedColumn   string
}

type generationOption struct {
	option  OptionType
	handler HandlerType
}

type generatedHandler struct {
	template    string
	handlerType HandlerType
}

type generatedRoute struct {
	Method      string
	Path        string
	HandlerFunc string
}

type resourceInfo struct {
	Name                  string
	Fields                []*fieldInfo
	searchIndexes         map[string][]*expressionField // Search Indexes are hidden columns in Spanner that are not present in Go struct definitions
	IsView                bool                          // Determines how CreatePatch is rendered in resource generation.
	HasCompoundPrimaryKey bool                          // Determines how CreatePatchSet is rendered in resource generation.
	IsConsolidated        bool

	// debugging info
	_packageName string
	_position    int
}

func (r *resourceInfo) SearchIndexes() []*searchIndex {
	typeIndexMap := make(map[resource.FilterType]string)
	for searchIndex, expressionFields := range r.searchIndexes {
		for _, exprField := range expressionFields {
			typeIndexMap[exprField.tokenType] = searchIndex
		}
	}

	var indexes []*searchIndex
	for tokenType, indexName := range typeIndexMap {
		indexes = append(indexes, &searchIndex{
			Name:       indexName,
			SearchType: string(tokenType),
		})
	}

	return indexes
}

func (r *resourceInfo) PrimaryKeyIsUUID() bool {
	for _, f := range r.Fields {
		if f.IsPrimaryKey {
			return f.GoType == "ccc.UUID"
		}
	}

	return false
}

func (r *resourceInfo) PrimaryKeyType() string {
	for _, f := range r.Fields {
		if f.IsPrimaryKey {
			return f.GoType
		}
	}

	return ""
}

type fieldInfo struct {
	Parent             *resourceInfo
	Name               string
	SpannerName        string
	GoType             string
	typescriptType     string
	query              string   //
	Conditions         []string // Contains auxiliary tags like `immutable`. Determines JSON tag in handler generation.
	permissions        []string
	Required           bool
	IsPrimaryKey       bool
	IsForeignKey       bool
	IsIndex            bool
	IsUniqueIndex      bool
	IsNullable         bool
	OrdinalPosition    int64 // Position of column in the table definition
	KeyOrdinalPosition int64 // Position of primary or foreign key in a compound key definition
	IsEnumerated       bool
	ReferencedResource string
	ReferencedField    string

	// parsing info
	parsedType types.Type

	// debugging info
	_position int
}

func (f *fieldInfo) TypescriptDataType() string {
	if f.typescriptType == "uuid" {
		return "string"
	}

	return f.typescriptType
}

func (f *fieldInfo) TypescriptDisplayType() string {
	if f.IsEnumerated {
		return "enumerated"
	}

	return f.typescriptType
}

func (f *fieldInfo) JSONTag() string {
	caser := strcase.NewCaser(false, nil, nil)
	camelCaseName := caser.ToCamel(f.Name)

	if !f.IsPrimaryKey {
		return fmt.Sprintf("json:%q", camelCaseName+",omitempty")
	}

	return fmt.Sprintf("json:%q", camelCaseName)
}

func (f *fieldInfo) JSONTagForPatch() string {
	if f.IsPrimaryKey || f.IsImmutable() {
		return fmt.Sprintf("json:%q", "-")
	}

	caser := strcase.NewCaser(false, nil, nil)
	camelCaseName := caser.ToCamel(f.Name)

	return fmt.Sprintf("json:%q", camelCaseName)
}

func (f *fieldInfo) IndexTag() string {
	if f.IsIndex {
		return `index:"true"`
	}

	return ""
}

func (f *fieldInfo) UniqueIndexTag() string {
	if f.IsUniqueIndex {
		return `index:"true"`
	}

	return ""
}

func (f *fieldInfo) IsImmutable() bool {
	return slices.Contains(f.Conditions, "immutable")
}

func (f *fieldInfo) QueryTag() string {
	if f.query != "" {
		return fmt.Sprintf("query:%q", f.query)
	}

	return ""
}

func (f *fieldInfo) ReadPermTag() string {
	if slices.Contains(f.permissions, "Read") {
		return fmt.Sprintf("perm:%q", "Read")
	}

	return ""
}

func (f *fieldInfo) ListPermTag() string {
	if slices.Contains(f.permissions, "List") {
		return fmt.Sprintf("perm:%q", "List")
	}

	return ""
}

func (f *fieldInfo) PatchPermTag() string {
	var patches []string
	for _, perm := range f.permissions {
		if perm != "Read" && perm != "List" {
			patches = append(patches, perm)
		}
	}

	if len(patches) != 0 {
		return fmt.Sprintf("perm:%q", strings.Join(patches, ","))
	}

	return ""
}

func (f *fieldInfo) SearchIndexTags() string {
	typeIndexMap := make(map[resource.SearchType][]string)
	for searchIndex, expressionFields := range f.Parent.searchIndexes {
		for _, exprField := range expressionFields {
			if f.SpannerName == exprField.fieldName {
				typeIndexMap[exprField.tokenType] = append(typeIndexMap[exprField.tokenType], searchIndex)
			}
		}
	}

	var tags []string
	for tokenType, indexes := range typeIndexMap {
		tags = append(tags, fmt.Sprintf("%s:%q", tokenType, strings.Join(indexes, ",")))
	}

	return strings.Join(tags, " ")
}

func (f *fieldInfo) IsView() bool {
	return f.Parent.IsView
}

type expressionField struct {
	tokenType resource.FilterType
	fieldName string
}

func generatedFileName(name string) string {
	return fmt.Sprintf("%s_%s.go", genPrefix, name)
}

type TSGenMode interface {
	mode()
}

type tsGenMode int

func (t tsGenMode) mode() {}

const (
	// Adds permission.ts to generator output
	TSPerm tsGenMode = 1 << iota

	// Adds resource.ts to generator output
	TSMeta
)

var (
	_defaultPluralOverrides = map[string]string{
		"LenderBranch": "LenderBranches",
	}

	_defaultTypescriptOverrides = map[string]string{
		reflect.TypeOf(ccc.UUID{}).String():            "uuid",
		reflect.TypeOf(ccc.NullUUID{}).String():        "uuid",
		reflect.TypeOf(resource.Link{}).String():       "Link",
		reflect.TypeOf(resource.NullLink{}).String():   "Link",
		reflect.TypeOf(decimal.Decimal{}).String():     "number",
		reflect.TypeOf(decimal.NullDecimal{}).String(): "number",
		reflect.TypeOf(time.Time{}).String():           "Date",
	}
)
