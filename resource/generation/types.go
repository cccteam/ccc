package generation

import (
	"fmt"
	"regexp"

	"github.com/cccteam/ccc/resource"
)

var baseTypes = []string{
	"bool",
	"string",
	"int", "int8", "int16", "int32", "int64",
	"float32", "float64",
	"uint", "uint8", "uint16", "uint32", "uint64", "uintptr",
	"byte",
	"rune",
	"complex64", "complex128",
	"error",
}

var tokenizeRegex = regexp.MustCompile(`(TOKENIZE_[^)]+)\(([^)]+)\)`)

const (
	genPrefix = "zz_gen"
)

type ConstraintType string

const (
	PrimaryKey ConstraintType = "PRIMARY KEY"
	ForeignKey ConstraintType = "FOREIGN KEY"
)

type HandlerType string

const (
	List  HandlerType = "list"
	Read  HandlerType = "read"
	Patch HandlerType = "patch"
)

func (h HandlerType) Method() string {
	switch h {
	case Read, List:
		return "GET"
	case Patch:
		return "PATCH"
	default:
		panic(fmt.Sprintf("Method(): unknown handler type: %s", h))
	}
}

type OptionType string

const (
	Regenerate OptionType = "regenerate"
	NoGenerate OptionType = "nogenerate"
)

type PatchType string

const (
	CreatePatch PatchType = "Create"
	UpdatePatch PatchType = "Update"
)

type GeneratedFileDeleteMethod int

const (
	// Used to remove files with the genPrefix value instead of reading the contents of the file.
	Prefix GeneratedFileDeleteMethod = iota
	// Used to remove files that contain the header comment "// Code generated by resourcegeneration. DO NOT EDIT."
	HeaderComment
)

const (
	querySetOutputFilename      = "types.go"
	resourceInterfaceOutputName = "resources_iface"
	resourcesTestFileName       = "resource_types_test.go"
	routesName                  = "routes"
	routerTestName              = "routes_test"
)

type generatedType struct {
	Name                  string
	IsView                bool
	HasCompoundPrimaryKey bool
	Fields                []*typeField
	SearchIndexes         []*searchIndex
}

type typeField struct {
	Name            string
	Type            string
	Tag             string
	IsPrimaryKey    bool
	IsIndex         bool
	IsUniqueIndex   bool
	ConstraintTypes []ConstraintType
	fieldTagInfo
}

type fieldTagInfo struct {
	QueryTag      string
	ReadPerm      string
	ListPerm      string
	PatchPerm     string
	Conditions    []string
	SpannerColumn string
}

type searchIndex struct {
	Name       string
	SearchType string
}

type FieldMetadata struct {
	ColumnName         string
	ConstraintTypes    []ConstraintType
	IsPrimaryKey       bool
	IsForeignKey       bool
	SpannerType        string
	IsNullable         bool
	IsIndex            bool
	IsUniqueIndex      bool
	OrdinalPosition    int64
	KeyOrdinalPosition int64
	ReferencedTable    string
	ReferencedColumn   string
}

type InformationSchemaResult struct {
	TableName            string  `spanner:"TABLE_NAME"`
	ColumnName           string  `spanner:"COLUMN_NAME"`
	ConstraintName       *string `spanner:"CONSTRAINT_NAME"`
	IsPrimaryKey         bool    `spanner:"IS_PRIMARY_KEY"`
	IsForeignKey         bool    `spanner:"IS_FOREIGN_KEY"`
	ReferencedTable      *string `spanner:"REFERENCED_TABLE"`
	ReferencedColumn     *string `spanner:"REFERENCED_COLUMN"`
	SpannerType          string  `spanner:"SPANNER_TYPE"`
	IsNullable           bool    `spanner:"IS_NULLABLE"`
	IsView               bool    `spanner:"IS_VIEW"`
	IsIndex              bool    `spanner:"IS_INDEX"`
	IsUniqueIndex        bool    `spanner:"IS_UNIQUE_INDEX"`
	GenerationExpression *string `spanner:"GENERATION_EXPRESSION"`
	OrdinalPosition      int64   `spanner:"ORDINAL_POSITION"`
	KeyOrdinalPosition   int64   `spanner:"KEY_ORDINAL_POSITION"`
}

type TableMetadata struct {
	Columns       map[string]FieldMetadata
	SearchIndexes map[string][]*expressionField
	IsView        bool
}

type generationOption struct {
	option  OptionType
	handler HandlerType
}

type generatedHandler struct {
	template    string
	handlerType HandlerType
}

type generatedRoute struct {
	Method      string
	Path        string
	HandlerFunc string
}

type tsType int

const (
	link tsType = iota
	uuid
	boolean
	str
	number
	date
	enumerated
)

func (t tsType) String() string {
	switch t {
	case link:
		return "Link"
	case uuid:
		return "uuid"
	case boolean:
		return "boolean"
	case str:
		return "string"
	case number:
		return "number"
	case date:
		return "Date"
	case enumerated:
		return "enumerated"
	}

	return "string"
}

type generatedResource struct {
	Name               string
	Fields             []*generatedResource
	dataType           tsType
	Required           bool
	IsPrimaryKey       bool
	IsForeignKey       bool
	OrdinalPosition    int64
	KeyOrdinalPosition int64
	ReferencedResource string
	ReferencedColumn   string
}

func (r generatedResource) DataType() string {
	if r.dataType == uuid || r.dataType == enumerated {
		return str.String()
	}

	return r.dataType.String()
}

func (r generatedResource) DisplayType() string {
	return r.dataType.String()
}

type expressionField struct {
	tokenType resource.SearchType
	fieldName string
}

func generatedFileName(name string) string {
	return fmt.Sprintf("%s_%s.go", genPrefix, name)
}
