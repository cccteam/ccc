// Code generated by MockGen. DO NOT EDIT.
// Source: ../../accesstypes/accesstypes.go
//
// Generated by this command:
//
//	mockgen -source ../../accesstypes/accesstypes.go -destination mock_accesstypes/mock_accesstypes.go
//

// Package mock_accesstypes is a generated GoMock package.
package mock_accesstypes

import (
	context "context"
	reflect "reflect"

	accesstypes "github.com/cccteam/ccc/accesstypes"
	gomock "go.uber.org/mock/gomock"
)

// MockEnforcer is a mock of Enforcer interface.
type MockEnforcer struct {
	ctrl     *gomock.Controller
	recorder *MockEnforcerMockRecorder
	isgomock struct{}
}

// MockEnforcerMockRecorder is the mock recorder for MockEnforcer.
type MockEnforcerMockRecorder struct {
	mock *MockEnforcer
}

// NewMockEnforcer creates a new mock instance.
func NewMockEnforcer(ctrl *gomock.Controller) *MockEnforcer {
	mock := &MockEnforcer{ctrl: ctrl}
	mock.recorder = &MockEnforcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnforcer) EXPECT() *MockEnforcerMockRecorder {
	return m.recorder
}

// RequireResources mocks base method.
func (m *MockEnforcer) RequireResources(ctx context.Context, user accesstypes.User, domain accesstypes.Domain, perms accesstypes.Permission, resources ...accesstypes.Resource) (bool, []accesstypes.Resource, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, user, domain, perms}
	for _, a := range resources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequireResources", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]accesstypes.Resource)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequireResources indicates an expected call of RequireResources.
func (mr *MockEnforcerMockRecorder) RequireResources(ctx, user, domain, perms any, resources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, user, domain, perms}, resources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireResources", reflect.TypeOf((*MockEnforcer)(nil).RequireResources), varargs...)
}
